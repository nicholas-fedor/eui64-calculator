name: Build

on:
  workflow_call:
    inputs:
      docker_namespace:
        description: "Docker Hub namespace for image names (e.g., 'nickfedor')"
        required: true
        type: string
      ghcr_namespace:
        description: "GitHub Container Registry namespace for image names (e.g., 'nicholas-fedor')"
        required: true
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      CGO_ENABLED: 0
      TAG: ${{ github.ref_name }}
    permissions:
      contents: write # For code checkout and publishing releases
      packages: write # For pushing images to registries
      attestations: write # For generating provenance and SBOMs
      id-token: write # For OIDC auth to container registry
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0 # Full history for GoReleaser versioning.

      - name: Set up Go
        uses: actions/setup-go@e75c3e80bcde46e322cd5845ae46582947c9becd
        with:
          go-version: 1.25.x

      - name: Cache Go modules
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install templ
        run: go install github.com/a-h/templ/cmd/templ@v0.3.924

      - name: Install dependencies
        run: go mod download

      - name: Generate templates
        run: go generate ./...

      - name: Set up QEMU # Enable multi-platform emulation.
        uses: docker/setup-qemu-action@05340d1c670183e7caabdb33ae9f1c80fae3b0c2
        with:
          platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8,linux/riscv64

      - name: Set up Docker Buildx # Configure multi-platform builds.
        uses: docker/setup-buildx-action@af1b253b8dc984466d22633f04ef341c1520ed2f
        with:
          driver: docker-container
          platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8,linux/riscv64
          use: true

      - name: Enable containerd snapshotter # Enable containerd for multi-platform builds
        run: |
          sudo bash -c 'echo "{\"features\": {\"containerd-snapshotter\": true}}" > /etc/docker/daemon.json'
          sudo systemctl restart docker

      - name: Install Syft for SBOM generation # Install Syft for GoReleaser SBOM generation
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Login to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@35b9a27f96d11adbbf695207d0787778ad5be891
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --config build/goreleaser/goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        run: |
          curl -sSfL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

      - name: Sign Docker Images with Cosign (Keyless)
        run: |
          for arch in amd64 i386 armhf arm64v8 riscv64; do
            cosign sign --identity-token=${{ secrets.GITHUB_TOKEN }} ${{ inputs.docker_namespace }}/eui64-calculator:${arch}-${{ github.ref_name }}
            cosign sign --identity-token=${{ secrets.GITHUB_TOKEN }} ${{ inputs.docker_namespace }}/eui64-calculator:${arch}-latest
            cosign sign --identity-token=${{ secrets.GITHUB_TOKEN }} ghcr.io/${{ inputs.ghcr_namespace }}/eui64-calculator:${arch}-${{ github.ref_name }}
            cosign sign --identity-token=${{ secrets.GITHUB_TOKEN }} ghcr.io/${{ inputs.ghcr_namespace }}/eui64-calculator:${arch}-latest
          done
        shell: bash

      - name: Upload binary SBOMs # Upload SBOMs for prod builds.
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: binary-sboms
          path: ./dist/*.sbom.json
          if-no-files-found: warn

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-checksums: ./dist/checksums.txt

      - name: Clean up dist directory # Remove dist directory to avoid leftover artifacts.
        if: always()
        run: rm -rf dist
